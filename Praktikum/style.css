@charset "utf-8";
/* CSS Document */
#test {
	height: 20px;
	width: 20px;
	background: #55CC1C;
}

#block{
	width: 200px;
	height: 100px;
	background:#2514B7;
	
}

/*Выпадающее меню: */

.menu-item{
	border: 2px solid #E52B2E;
	display: inline-block;/*Это значение генерирует блочный элемент, который обтекается другими элементами веб-страницы подобно встроенному элементу. Фактически такой элемент по своему действию похож на встраиваемые элементы (вроде тега <img>). При этом его внутренняя часть форматируется как блочный элемент, а сам элемент — как встроенный.*/
	
	position: relative;/*Положение элемента устанавливается относительно его исходного места. Добавление свойств left, top, right и bottom изменяет позицию элемента и сдвигает его в ту или иную сторону от первоначального расположения.*/
	
	cursor: pointer;/*появляется ладошка с пальцем при наведении*/

}

.menu-item .submenu {
	height: 40 px;
	width: 120 px;
	background: #11A630;
	position: absolute;/*Указывает, что элемент абсолютно позиционирован, при этом другие элементы отображаются на веб-странице словно абсолютно позиционированного элемента и нет. Положение элемента задается свойствами left, top, right и bottom, также на положение влияет значение свойства position родительского элемента. Так, если у родителя значение position установлено как static или родителя нет, то отсчет координат ведется от края окна браузера. Если у родителя значение position задано как fixed, relative или absolute, то отсчет координат ведется от края родительского элемента.*/
	cursor: pointer;

}

/* Делаем вкладки - табы.   */

#tabs .tab {/*!!!!!!!!Написал без пробела, и этот блок был не виден, так что всегда внимание на этом держать!!!!!*/
	display: inline-block;
	padding: 5px 10px;
	cursor: pointer;
	position: relative;
	z-index: 5;/*Любые позиционированные элементы на веб-странице могут накладываться друг на друга в определенном порядке, имитируя тем самым третье измерение, перпендикулярное экрану. Каждый элемент может находиться как ниже, так и выше других объектов веб-страницы, их размещением по z-оси и управляет z-index. Это свойство работает только для элементов, у которых значение position задано как absolute, fixed или relative.*/
}

#tabs .whiteborder {
	border: 1px solid #707070;  
	boeder-bottom: 1px silid #A00B0D; /*#A00B0D*/
	border-radius: 3px 3px 0 0;
}

#tabs .tabContent {
	width: 300px;
	height: 60px;
	border: 1px solid #707070;
	position: relative;
	top: -1px;
	z-index: 1;
	padding: 10px;
	border-radius: 0 0 3px 3px;
}

#tabs .hide {
	display: none;/*Временно удаляет элемент из документа. Занимаемое им место не резервируется и веб-страница формируется так, словно элемента и не было. Изменить значение и сделать вновь видимым элемент можно с помощью скриптов, обращаясь к свойствам через объектную модель. В этом случае происходит переформатирование данных на странице с учетом вновь добавленного элемента.*/
}

#tabs .show {
	display: block;/*Элемент показывается как блочный. Применение этого значения для встроенных элементов, например тега <span>, заставляет его вести подобно блокам — происходит перенос строк в начале и в конце содержимого.*/
}


/*Практика: Урок 6: Создаем модальные окна:*/

.modal {
	display: none;
	position: fixed;
	z-index: 1;
	left: 0;
	top: 0;
	width: 100%;
	height:100%;
	overflow: auto;	/* Описание
Свойство overflow управляет отображением содержания блочного элемента, если оно целиком не помещается и выходит за область заданных размеров.

Синтаксис
overflow: auto | hidden | scroll | visible | inherit

Значения
visible
Отображается все содержание элемента, даже за пределами установленной высоты и ширины.
hidden
Отображается только область внутри элемента, остальное будет скрыто.
scroll
Всегда добавляются полосы прокрутки.
auto
Полосы прокрутки добавляются только при необходимости.
inherit
Наследует значение родителя. */
	background-color: rgba(0,0,0, 0.8); /*Черный цвет с добавленной прозрачностью*/
}

.modal-content {
	background-color: #fefefe;
	margin: 15% auto; /* Устанавливает величину отступа от каждого края элемента. Отступом является пространство от границы текущего элемента до внутренней границы его родительского элемента  */
	padding: 20 px;/* Устанавливает значение полей вокруг содержимого элемента. Полем называется расстояние от внутреннего края рамки элемента до воображаемого прямоугольника, ограничивающего его содержимое  */
	border: 1px solid #888;
	width: 80%;
}

.close {
	color: #aaa;
	float: right;
	font-size: 28px;
	font-weight: bold;
	}

/*Практика: Урок 7: Анимация:*/
#myContainer {
	width: 400px;
	height: 400px;
	position: relative; /* для того, чтобы задать анимацию, нужно именно такое позиционирование задавать*/
	/*Положение элемента устанавливается относительно его исходного места. Добавление свойств left, top, right и bottom изменяет позицию элемента и сдвигает его в ту или иную сторону от первоначального расположения.*/
	background: yellow;
}

#myAnimation {
	width: 50px;
	height: 50px;
	position: absolute;/*Указывает, что элемент абсолютно позиционирован, при этом другие элементы отображаются на веб-странице словно абсолютно позиционированного элемента и нет. Положение элемента задается свойствами left, top, right и bottom, также на положение влияет значение свойства position родительского элемента. Так, если у родителя значение position установлено как static или родителя нет, то отсчет координат ведется от края окна браузера. Если у родителя значение position задано как fixed, relative или absolute, то отсчет координат ведется от края родительского элемента.*/
	background: red;
}

