@charset "utf-8";

/*Практика: Урок 8: Как сделать слайдер (Carousel)*/

.slideshow-container {
	max-width: 1000px;
	position: relative;
	margin: auto;
}

.prev, .next {
	cursor: pointer;
	position: absolute;
	top: 50%;
	width: auto;
	margin-top: -22px;
	padding: 16px;
	color: white;
	font-weight: bold;
	font-size: 18px;
	transition: 0.6s, ease;/*Универсальное свойство, которое позволяет одновременно задать значения transition-property, transition-duration, transition-timing-function и transition-delay. Устанавливает эффект перехода между двумя состояниями элемента, они могут быть определены с помощью псевдоэлемента :hover или :active, а также динамически через JavaScript.*/
	border-radius: 0 3px 3px 0;
	
}

.next {
	right: 0;
	border-radius: 3px 0 0 3px;
}

.prev:hover, .next:hover {  /*Псевдокласс :hover  Определяет стиль элемента при наведении на него курсора мыши, но при этом элемент еще не активирован, иными словами кнопка мыши не нажата. */
	background-color: rgba(0,0,0,0.8);  
} 

.text {
	color: #f2f2f2;
	font-size: 12px;
	padding: 8px 12px;
	position: absolute;
	top: 0;
}

.dot {
	cursor: pointer;
	height: 13px;
	width: 13px;
	margin: 0 2px;
	background-color: #bbb;
	border-radius: 50%;/*Устанавливает радиус скругления уголков рамки. Если рамка не задана, то скругление также происходит и с фоном.*/ /* В нашем случае получились кружочки  */
	display: inline-block;/*Это значение генерирует блочный элемент, который обтекается другими элементами веб-страницы подобно встроенному элементу. Фактически такой элемент по своему действию похож на встраиваемые элементы (вроде тега <img>). При этом его внутренняя часть форматируется как блочный элемент, а сам элемент — как встроенный.*/
	transition: background-color 0.6s ease;
}

.active, .dot:hover {
	background-color: #717171;
}

.fade {
	-webkit-animation-name: fade;
	-webkit-animation-duration: 1.5s;
	animation-name: fade;/*  Свойство задаёт имя анимации. Имя анимации создаётся в правиле @keyframes. Рекомендуется использовать название, отражающее суть анимации, при этом можно использовать одно или несколько слов, связанных между собой при помощи пробела - или символа нижнего подчеркивания _. Свойство не наследуется.   Имя анимации, которое связывает правило @keyframes с селектором.  */
	animation-duration: 1.5s;

	}

@-webkit-keyframes fade{
	from{opacity:.4}
	to{opacity: 1}
}

@keyframes fade{
	from{opacity:.4}
	to{opacity: 1}
}

/*Практика: Урок 9:Как сделать фильтрацию на сайт.*/

#myInput {
	width: 100%;
	font-size: 16px;
	padding: 12px 20px 12px 5px;
	border: 1px solid #ddd;
	margin-bottom: 12 px;
}

#myUl {
	list-style: none;
	padding: 0;
	margin: 0;
}

#myUl li a{
	border: 1px solid #ddd;
	margin-top: -1px;
	background-color: #f6f6f6;
	padding: 12px;
	text-decoration: none;/* Добавляет оформление текста в виде его подчеркивания, перечеркивания, линии над текстом и мигания. Одновременно можно применить более одного стиля, перечисляя значения через пробел. */
	font-size: 18px;
	color: black;
	display: block;
}

#myUl li a.header{
	background-color: #e2e2e2;
	cursor: default;/* при наведении курсор будет стрелочкой */
}

#myUl li a:hover:not(.header){/*При наведении курсором на элемент списка который не хедер дает ховер эффект: цвет фона меняется*/
/* Псевдокласс :not задаёт правила стилей для элементов, которые не содержат указанный селектор.
Синтаксис
элемент:not(<селектор>) { ... }
 */
/*Псевдокласс :hover  Определяет стиль элемента при наведении на него курсора мыши, но при этом элемент еще не активирован, иными словами кнопка мыши не нажата. Синтаксис
элемент:hover { ... } */
	background-color: #eee;
}

/*Lesson 10: Делаем калькулятор.*/

/*#calcul{
	background-color: #8A6061;
	border: 1px solid #000000;
	border-radius: 5px 0 0 5px
	
}
*/

#zifferWrapper{
	background-color: #8A6061;
	border: 1px solid #000000;
	border-radius: 5px 5px 5px 5px
	
}

.calcBtns {
	border-radius: 20px 20px 20px 20px;
	cursor:pointer;
}

/*Lesson 12: Модальные изображения.*/

#myImg {
	border-radius: 5px;
	cursor: pointer;
	transition: 0.3s;
}

#myImg:hover {
	opacity: 0.7; /*Определяет уровень прозрачности элемента веб-страницы. При частичной или полной прозрачности через элемент проступает фоновый рисунок или другие элементы, расположенные ниже полупрозрачного объекта.*/
}

.modalik {
	display: none;
	position: fixed;
	z-index: 1;
	padding-top: 100px;
	left: 0;
	top: 0;
	width: 100%;
	height: 100%;
	overflow: auto;/*Свойство overflow управляет отображением содержания блочного элемента, если оно целиком не помещается и выходит за область заданных размеров.*/  /*auto
Полосы прокрутки добавляются только при необходимости.*/
	background-color: rgb(0,0,0);
	background-color: rgba(0,0,0,0.9);/*2 раза background-color потому что старые браузеры не поддерживают функцию rgba, так что первый из двух для совместимости (чёрный фон без прозрачности).﻿*/
	
}

.modal-content {
	margin: auto; /*Указывает, что размер отступов будет автоматически рассчитан браузером.*/
	display: block;
	width: 80%;
	max-width: 700px;
	
}

#caption {
	margin: auto;
	display: block;
	width: 80%;
	max-width: 700px;
	text-align: center;
	color: #ccc;
	padding: 10px 0;
	height: 150px;
}

/*Добавим анимации: */
.modal-content, #caption {
	-webkit-animation-name: zoom; 
	-webkit-animation-duration: 0.6s;
	animation-name: zoom;
	animation-duration: 0.6s;
}

@-webkit-keyframes zoom {
	from{-webkit-transform:scale(0)}
	to{-webkit-transform:scale(1)}
	
}

@keyframes zoom {
	from{transform: scale(0)}
	to{transform: sacle(1)}
	
}

.close {
	position: absolute; /* absolute
Указывает, что элемент абсолютно позиционирован, при этом другие элементы отображаются на веб-странице словно абсолютно позиционированного элемента и нет. Положение элемента задается свойствами left, top, right и bottom, также на положение влияет значение свойства position родительского элемента. Так, если у родителя значение position установлено как static или родителя нет, то отсчет координат ведется от края окна браузера. Если у родителя значение position задано как fixed, relative или absolute, то отсчет координат ведется от края родительского элемента. */
	top: 15px;
	right: 35px;
	color: #f1f1f1;
	font-size: 40px;
	font-weight: bold;
	transition: 0.3s;
}

.close:hover, close:focus { /*Псевдокласс :focus определяет стиль для элемента получающего фокус. Например, им может быть текстовое поле формы, в которое устанавливается курсор.

Синтаксис
элемент:focus { ... }*/
	color: #bbb;
	text-decoration: none;
	cursor: pointer;
}

@madia only screen and (max-width: 700px){ /*Правило @media позволяет указать тип носителя, для которого будет применяться указанный стиль. В качестве типов выступают различные устройства, например, принтер, КПК, монитор и др. В табл. 1 перечислены некоторые из них.*/
/*screen	Экран монитора.*/
/*Синтаксис
@media тип1 [, тип2] {
  Описание стиля 
}*/
	.modal-content{width: 100%};

}


/*Lesson 13: Прогресс бар. Как управлять*/
#myProgress {
	position: relative;
	width: 500px;
	height: 30px;
	background-color: #ddd;
	
}

#myBar {
	position: relative;
	width: 10%;
	height: 100%;
	background-color: #4CAF50;
}

#label {
	text-align: center;
	line-height: 30px;
	color: white;
}

/*Lesson 14: Как сделать Popup.*/
.popup {
	position: relative;
	display: inline-block;
	cursor: pointer;
	margin: 50px;
	
}

.popup .popuptext {
	visibility: hidden;
	width: 160px;
	background-color: #555;
	color: #fff;
	text-align: center;
	border-radius: 6px;
	padding: 8px 0;
	position: absolute;
	z-index: 1;/*Любые позиционированные элементы на веб-странице могут накладываться друг на друга в определенном порядке, имитируя тем самым третье измерение, перпендикулярное экрану. Каждый элемент может находиться как ниже, так и выше других объектов веб-страницы, их размещением по z-оси и управляет z-index. Это свойство работает только для элементов, у которых значение position задано как absolute, fixed или relative*/
	bottom: 125%;
	left: 50%;
	margin-left: -80px;
}


.popup .popuptext:after {/*Псевдоэлемент, который используется для вывода желаемого текста после содержимого элемента, к которому он добавляется. Псевдоэлемент :after работает совместно со свойством content.

Для :after характерны следующие особенности.

При добавлении :after к блочному элементу, значение свойства display может быть только: block, inline, none, list-item. Все остальные значения будут трактоваться как block.
При добавлении :after к встроенному элементу, display ограничен значениями inline и none. Все остальные будут восприниматься как inline.
Синтаксис
элемент:after  { content: "текст"  }*/
	content: "";/*Свойство content позволяет вставлять генерируемое содержание в текст веб-страницы, которое первоначально в тексте отсутствует. Применяется совместно с псевдоэлементами :after и :before, они соответственно указывают отображать новое содержимое после или до элемента, к которому добавляются.*/
	position: absolute;
	top: 100%;
	left: 50%;
	margin-left: -5px;
	border-width: 5px;
	border-style: solid;
	border-color: #555;
	
}

.popup .show {
	visibility: visible;
	-webkit-animation: fadeIn 1s;
	animation: fadeIn 1s;
}

@-webkit-keyframes fadeIn{
	from{opacity:0;}
	to{opacity:1;}
}

@keyframes fadeIn {
	from{opacity:0;}
	to{opacity:1;}
}











